{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","target","GifGridItem","title","url","src","alt","getGif","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGrid","color","highlightColor","count","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"0OAsBeA,EApBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAYzC,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAIcO,UAAU,cACtC,2BAAOC,KAAK,OAAOC,MAAOV,EAAYW,SAZhB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,UAYrB,4BAAQD,KAAK,UAAb,YCfOI,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,yBAAKP,UAAU,8CACb,yBAAKQ,IAAKD,EAAKE,IAAKH,IACpB,2BAAIA,K,wBCNGI,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdL,EADc,iDACkCM,UACpDF,GAFkB,+DAIIG,MAAMP,GAJV,cAIdQ,EAJc,gBAKGA,EAAUC,OALb,uBAKZC,EALY,EAKZA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QAVlB,kBAabW,GAba,4CAAH,sDCmBJM,EAjBM,SAACb,GAAc,IAAD,EACPpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAcjC,OARAC,qBAAU,WACRlB,EAAOC,GAAUkB,MAAK,SAACC,GACrBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACd,IACGe,G,gBCZIK,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,EAELa,EAAab,GAAvCc,EAF+B,EAE/BA,QAAeH,EAFgB,EAEtBL,KACjB,OACE,oCACE,4BAAKN,GACJc,GACC,kBAAC,gBAAD,CAAeO,MAAM,UAAUC,eAAe,QAC5C,2BACE,kBAAC,IAAD,CAAUC,MAAO,MAIvB,yBAAKlC,UAAU,aACZsB,EAAOH,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,iBAAiBA,EAAjB,CAAsBe,IAAKf,EAAIC,YCC1Be,EAjBM,WAAO,IAAD,EACW7C,mBAAS,CAAC,iBADrB,mBAClB8C,EADkB,KACN/C,EADM,KAEzB,OACE,oCACE,wBAAIU,UAAU,yCAAd,kBACA,kBAAC,EAAD,CAAaV,cAAeA,IAC5B,6BAEA,4BACG+C,EAAWlB,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASwB,IAAKxB,EAAUA,SAAUA,U,MCR5C2B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.3dd4271f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setinputValue] = useState('')\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value)\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats])\r\n      setinputValue('')\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit} className='formulario'>\r\n      <input type='text' value={inputValue} onChange={handleInputChange} />\r\n      <button type='submit'>Buscar</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddCategory\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className='card animate__animated animate__zoomInDown'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","export const getGif = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=B2K2R6ofUhtZarscTnX26zLiXaI2mBvY`\r\n  const respuesta = await fetch(url)\r\n  const { data } = await respuesta.json()\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  return gifs\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGif } from './../helpers/getGifs'\r\nconst useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n  //efectos no pueden ser async\r\n  useEffect(() => {\r\n    getGif(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false\r\n      })\r\n    })\r\n  }, [category])\r\n  return state\r\n}\r\n\r\nexport default useFetchGifs\r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport useFetchGifs from './../hooks/useFetchGifs'\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\r\nexport const GifGrid = ({ category }) => {\r\n  // para renombrar en la destructuracion es con :\r\n  const { loading, data: images } = useFetchGifs(category)\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && (\r\n        <SkeletonTheme color='#202020' highlightColor='#444'>\r\n          <p>\r\n            <Skeleton count={3} />\r\n          </p>\r\n        </SkeletonTheme>\r\n      )}\r\n      <div className='card-grid'>\r\n        {images.map((img) => (\r\n          <GifGridItem {...img} key={img.id} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['Harry Potter'])\r\n  return (\r\n    <>\r\n      <h1 className='animate__animated animate__rubberBand'>Gif Expert App</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport GifExpertApp from './GifExpertApp'\nimport './index.css'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n"],"sourceRoot":""}